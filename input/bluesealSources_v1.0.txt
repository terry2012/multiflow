Permission:android.permission.READ_SMS
<com.android.mms.data.WorkingMessage: android.net.Uri createDraftMmsMessage(com.google.android.mms.pdu.PduPersister,com.google.android.mms.pdu.SendReq,com.android.mms.model.SlideshowModel,android.net.Uri)> (3)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri storeMessage(android.content.Context,android.telephony.SmsMessage[],int)> (2)
<com.android.mms.data.WorkingMessage: android.net.Uri access$1300(com.google.android.mms.pdu.PduPersister,com.google.android.mms.pdu.SendReq,com.android.mms.model.SlideshowModel,android.net.Uri)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri replaceMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.data.Conversation: android.net.Uri getUri()> (2)
<com.android.mms.ui.ComposeMessageActivity: int getDrmMimeMenuStringRsrc(long)> (2)
<com.android.mms.ui.ComposeMessageActivity: int access$3100(com.android.mms.ui.ComposeMessageActivity,long)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: int getDrmMimeMenuStringRsrc(long)> (1)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: int access$3100(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.data.Conversation: java.lang.String verifySingleRecipient(android.content.Context,long,java.lang.String)> (2)
<com.android.mms.transaction.MessagingNotification: com.android.mms.transaction.MessagingNotification$MmsSmsDeliveryInfo getSmsNewDeliveryInfo(android.content.Context)> (1)
<com.android.mms.util.AddressUtils: java.lang.String getFrom(android.content.Context,android.net.Uri)> (3)
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getThumbnail(android.net.Uri,com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getVideoThumbnail(android.net.Uri,com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.ui.MessageListAdapter: com.android.mms.ui.MessageItem getCachedMessageItem(java.lang.String,long,android.database.Cursor)> (4)
<com.android.mms.model.ImageModel: com.android.mms.util.ItemLoadedFuture loadThumbnailBitmap(com.android.mms.util.ItemLoadedCallback)> (2)
<com.android.mms.model.VideoModel: com.android.mms.util.ItemLoadedFuture loadThumbnailBitmap(com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.data.WorkingMessage: java.lang.String readDraftSmsMessage(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: java.lang.String access$000(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation)> (1)
<com.android.mms.data.Conversation: android.net.Uri getUri(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: android.content.Intent createIntent(android.content.Context,long)> (5)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: android.content.Intent createIntent(android.content.Context,long)> (1)
<com.android.mms.util.Recycler$MmsRecycler: android.database.Cursor getAllThreads(android.content.Context)> (2)
<com.android.mms.util.Recycler: android.database.Cursor getAllThreads(android.content.Context)> (1)
<com.android.mms.data.WorkingMessage: android.net.Uri readDraftMmsMessage(android.content.Context,com.android.mms.data.Conversation,java.lang.StringBuilder)> (1)
<com.android.mms.data.WorkingMessage: android.net.Uri access$200(android.content.Context,com.android.mms.data.Conversation,java.lang.StringBuilder)> (1)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri storeMessage(android.telephony.SmsMessage)> (2)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri replaceMessage(android.telephony.SmsMessage)> (1)
<com.android.mms.ui.MessageUtils: java.lang.String getMessageDetails(android.content.Context,android.database.Cursor,int)> (1)
<com.android.mms.ui.MessageUtils: java.lang.String getMultimediaMessageDetails(android.content.Context,android.database.Cursor,int)> (1)
<com.android.mms.util.Recycler$SmsRecycler: android.database.Cursor getAllThreads(android.content.Context)> (2)
<com.android.mms.ui.DeliveryReportActivity: java.util.Map getMmsReportStatus()> (1)
<com.android.mms.ui.DeliveryReportActivity: java.util.List getMmsReportItems()> (1)
<com.android.mms.ui.DeliveryReportActivity: java.util.List getReportItems()> (1)
<com.android.mms.transaction.RetryScheduler: int getResponseStatus(long)> (1)
<com.google.android.mms.pdu.PduPersister: com.google.android.mms.pdu.GenericPdu load(android.net.Uri)> (11)
<com.android.mms.model.SlideshowModel: com.google.android.mms.pdu.PduBody getPduBody(android.content.Context,android.net.Uri)> (6)
<com.android.mms.util.DownloadManager: java.lang.String getMessage(android.net.Uri)> (1)
<com.android.mms.model.SlideshowModel: com.android.mms.model.SlideshowModel createFromMessageUri(android.content.Context,android.net.Uri)> (4)
<com.android.mms.util.DownloadManager: java.lang.String access$400(com.android.mms.util.DownloadManager,android.net.Uri)> (1)
<com.android.mms.data.WorkingMessage: com.android.mms.data.WorkingMessage load(com.android.mms.ui.ComposeMessageActivity,android.net.Uri)> (3)
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> (1)
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.mms.ui.DeliveryReportActivity: java.util.List getSmsReportItems()> (1)
<com.android.mms.transaction.SmsMessageSender: java.lang.String getOutgoingServiceCenter(long)> (2)
<com.android.mms.transaction.SmsSingleRecipientSender: java.lang.String getOutgoingServiceCenter(long)> (1)
<com.google.android.mms.pdu.PduPersister: android.database.Cursor getPendingMessages(long)> (2)
<com.android.mms.ui.DeliveryReportActivity: java.util.List getMmsReportRequests()> (1)

Permission:android.permission.READ_EXTERNAL_STORAGE
<com.android.providers.media.MediaProvider: android.os.ParcelFileDescriptor openFileAndEnforcePathPermissionsHelper(android.net.Uri,java.lang.String)> (1)
<com.android.providers.media.MediaProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> (1)
<com.android.providers.media.MediaProvider: android.net.Uri getAlbumArtOutputUri(com.android.providers.media.MediaProvider$DatabaseHelper,android.database.sqlite.SQLiteDatabase,long,android.net.Uri)> (1)

Permission:com.android.browser.permission.READ_HISTORY_BOOKMARKS
<android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)> ()
<com.android.browser.provider.BrowserProvider2: java.lang.String[] getAccountNameAndType(long)> (2)
<android.provider.BrowserContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> ()
<com.android.browser.BookmarkUtils: android.net.Uri getBookmarksUri(android.content.Context)> (5)
<android.provider.Browser: java.lang.String[] getVisitedHistory(android.content.ContentResolver)> (1)
<android.provider.Browser: android.database.Cursor getVisitedLike(android.content.ContentResolver,java.lang.String)> (1)
<android.provider.BrowserContract$Bookmarks: android.net.Uri buildFolderUri(long)> (1)
<com.android.browser.AddBookmarkPage: android.net.Uri getUriForFolder(long)> (2)
<android.provider.Browser: android.database.Cursor getAllBookmarks(android.content.ContentResolver)> ()
<com.android.browser.SuggestionsAdapter$SuggestFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.browser.AddBookmarkPage$EditBookmarkInfoLoader: com.android.browser.AddBookmarkPage$EditBookmarkInfo loadInBackground()> (1)
<com.android.browser.AddBookmarkPage$EditBookmarkInfoLoader: java.lang.Object loadInBackground()> (1)
<android.provider.BrowserContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> ()
<com.android.browser.TabControl: com.android.browser.SnapshotTab createSnapshotTab(long)> (1)
<com.android.browser.Preloader: com.android.browser.Preloader$PreloaderSession getSession(java.lang.String)> (2)
<com.android.browser.Controller: com.android.browser.Tab showPreloadedTab(com.android.browser.IntentHandler$UrlData)> (1)
<com.android.browser.Controller: com.android.browser.Tab openIncognitoTab()> (3)
<com.android.browser.Controller: com.android.browser.Tab openTabToHomePage()> (4)
<com.android.browser.UiController: com.android.browser.Tab openIncognitoTab()> (1)
<com.android.browser.UiController: com.android.browser.Tab openTabToHomePage()> (2)

Permission:android.permission.READ_USER_DICTIONARY
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService$AndroidSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestions(android.view.textservice.TextInfo,java.lang.String,int)> (2)
<com.android.inputmethod.latin.Suggest: com.android.inputmethod.latin.SuggestedWords getSuggestedWords(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo,int)> (1)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService$AndroidSpellCheckerSession: android.view.textservice.SuggestionsInfo onGetSuggestions(android.view.textservice.TextInfo,int)> (1)
<com.android.inputmethod.latin.Suggest: com.android.inputmethod.latin.SuggestedWords getBigramPredictions(java.lang.CharSequence)> (1)
<com.android.inputmethod.latin.spellcheck.DictionaryPool: com.android.inputmethod.latin.spellcheck.DictAndProximity take()> (2)
<com.android.inputmethod.latin.spellcheck.DictionaryPool: com.android.inputmethod.latin.spellcheck.DictAndProximity takeOrGetNull()> (1)
<com.android.settings.inputmethod.UserDictionaryList: java.util.TreeSet getUserDictionaryLocalesSet(android.app.Activity)> (3)
<com.android.settings.inputmethod.UserDictionaryAddWordContents: java.util.ArrayList getLocalesList(android.app.Activity)> (1)
<com.android.providers.userdictionary.DictionaryBackupAgent: byte[] getDictionary()> (1)

Permission:android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: android.location.Location _getLastKnownLocationLocked(java.lang.String)> (1)
<com.android.server.LocationManagerService: android.location.Location getLastKnownLocation(java.lang.String)> (2)
<com.android.server.LocationManagerService: android.os.Bundle getProviderInfo(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastKnownLocation(java.lang.String)> ()
<android.location.ILocationManager$Stub: android.location.Location getLastKnownLocation(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: android.os.Bundle getProviderInfo(java.lang.String)> ()
<android.location.ILocationManager$Stub: android.os.Bundle getProviderInfo(java.lang.String)> (2)
<android.location.ILocationManager: android.location.Location getLastKnownLocation(java.lang.String)> (1)
<android.location.ILocationManager: android.os.Bundle getProviderInfo(java.lang.String)> (1)
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> (4)
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)> ()
<com.android.gallery3d.util.ReverseGeocoder: java.lang.String computeAddress(com.android.gallery3d.util.ReverseGeocoder$SetLatLong)> (1)
<com.android.server.location.LocationBasedCountryDetector: android.location.Location getLastKnownLocation()> (2)
<com.android.gallery3d.data.LocationClustering: java.lang.String generateName(java.util.ArrayList,com.android.gallery3d.util.ReverseGeocoder)> (1)
<com.android.server.location.LocationBasedCountryDetector: android.location.Country detectCountry()> (1)
<com.android.server.location.CountryDetectorBase: android.location.Country detectCountry()> (1)
<com.android.gallery3d.data.ClusterAlbumSet: long reload()> (1)
<com.android.gallery3d.data.MediaSet: long reload()> (16)
<com.android.gallery3d.app.SlideshowPage$SequentialSource: long reload()> (1)
<com.android.gallery3d.app.SlideshowPage$ShuffleSource: long reload()> (1)
<com.android.gallery3d.data.ClusterAlbum: long reload()> (1)
<com.android.gallery3d.data.ComboAlbum: long reload()> (1)
<com.android.gallery3d.data.ComboAlbumSet: long reload()> (1)
<com.android.gallery3d.data.FilterDeleteSet: long reload()> (1)
<com.android.gallery3d.data.FilterTypeSet: long reload()> (1)
<com.android.gallery3d.data.LocalAlbumSet: long reload()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: long reload()> (1)
<com.android.gallery3d.data.MtpDeviceSet: long reload()> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$SlideshowSource: long reload()> (1)
<com.android.gallery3d.app.SlideshowDataAdapter: com.android.gallery3d.data.MediaItem loadItem()> (1)
<com.android.gallery3d.app.SlideshowDataAdapter: com.android.gallery3d.data.MediaItem access$500(com.android.gallery3d.app.SlideshowDataAdapter)> (1)
<com.android.gallery3d.gadget.WidgetUtils: android.graphics.Bitmap createWidgetBitmap(com.android.gallery3d.data.MediaItem)> (2)
<com.android.gallery3d.ui.AlbumSetSlidingWindow: com.android.gallery3d.ui.BitmapTexture getLoadingTexture()> ()
<com.android.gallery3d.gadget.LocalPhotoSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.gadget.MediaSetSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.app.AlbumSetDataLoader: java.lang.Object access$1900(com.android.gallery3d.app.AlbumSetDataLoader,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.PhotoDataAdapter: java.lang.Object access$2500(com.android.gallery3d.app.PhotoDataAdapter,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumDataLoader: java.lang.Object access$1700(com.android.gallery3d.app.AlbumDataLoader,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.gadget.WidgetSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.server.location.LocationBasedCountryDetector: java.util.List getEnabledProviders()> (1)
<com.android.phone.PhoneInterfaceManager: android.os.Bundle getCellLocation()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.os.Bundle getCellLocation()> ()
<com.android.internal.telephony.ITelephony$Stub: android.os.Bundle getCellLocation()> (2)
<com.android.internal.telephony.ITelephony: android.os.Bundle getCellLocation()> (1)
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()> (2)
<com.android.phone.PhoneInterfaceManager: java.util.List getNeighboringCellInfo()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getNeighboringCellInfo()> ()
<com.android.internal.telephony.ITelephony$Stub: java.util.List getNeighboringCellInfo()> (2)
<com.android.internal.telephony.ITelephony: java.util.List getNeighboringCellInfo()> (1)
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()> ()
<com.android.phone.PhoneInterfaceManager: java.util.List getAllCellInfo()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getAllCellInfo()> ()
<com.android.internal.telephony.ITelephony$Stub: java.util.List getAllCellInfo()> (2)
<com.android.internal.telephony.ITelephony: java.util.List getAllCellInfo()> (1)
<android.telephony.TelephonyManager: java.util.List getAllCellInfo()> ()

Permission:android.permission.READ_CONTACTS
<com.android.internal.telephony.IccPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (5)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: java.util.List getAdnRecordsInEf(int)> ()
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (1)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (1)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: java.util.List getAdnRecordsInEf(int)> (2)
<com.android.internal.telephony.IIccPhoneBook$Stub: java.util.List getAdnRecordsInEf(int)> (2)
<com.android.internal.telephony.IIccPhoneBook: java.util.List getAdnRecordsInEf(int)> (1)
<com.android.internal.telephony.IccProvider: android.database.MatrixCursor loadFromEf(int)> (2)
<com.android.email.activity.setup.AccountSetupNames: android.net.Uri access$100()> (1)
<com.android.ex.chips.BaseRecipientAdapter$DefaultFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.contacts.list.ProfileAndContactsLoader: android.database.MatrixCursor loadProfile()> (1)
<com.android.contacts.list.ProfileAndContactsLoader: android.database.Cursor loadInBackground()> (2)
<com.android.contacts.list.ProfileAndContactsLoader: java.lang.Object loadInBackground()> (2)
<com.android.common.contacts.BaseEmailAddressAdapter$DefaultPartitionFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.providers.contacts.LegacyApiSupport: android.net.Uri findFirstDataRow(long,java.lang.String)> (1)
<com.android.contacts.list.LegacyContactListAdapter: android.net.Uri getPersonUri(int)> (1)
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getContactInfoForPhoneNumber(java.lang.String)> (1)
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getContactInfo(com.android.mms.data.Contact)> (1)
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getContactInfoForSelf()> (1)
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getContactMethodType(android.net.Uri)> (1)
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getType(android.net.Uri)> (1)
<com.android.providers.contacts.ContactsProvider2: java.lang.String getType(android.net.Uri)> (2)
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)> ()
<com.android.contacts.util.NameConverter: java.util.Map displayNameToStructuredName(android.content.Context,java.lang.String)> (3)
<com.android.contacts.util.NameConverter: android.content.ContentValues displayNameToStructuredName(android.content.Context,java.lang.String,android.content.ContentValues)> (1)
<com.android.contacts.list.DirectoryListLoader: android.database.Cursor loadInBackground()> (1)
<com.android.contacts.list.DirectoryListLoader: java.lang.Object loadInBackground()> (1)
<com.android.contacts.ContactLoader: com.android.contacts.ContactLoader$Result loadInBackground()> (1)
<com.android.contacts.ContactLoader: java.lang.Object loadInBackground()> (1)
<com.android.mms.data.Contact: android.net.Uri getPhoneUri()> (1)
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getContactInfoForEmailAddress(java.lang.String)> (1)
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMemberFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.voicedialer.VoiceContact: java.util.List getVoiceContacts(android.app.Activity)> (1)
<com.android.contacts.calllog.ContactInfoHelper: com.android.contacts.calllog.ContactInfo lookupNumber(java.lang.String,java.lang.String)> (2)
<com.android.contacts.CallDetailActivity: com.android.contacts.PhoneCallDetails getPhoneCallDetailsForUri(android.net.Uri)> (1)
<com.android.contacts.CallDetailActivity: com.android.contacts.PhoneCallDetails access$300(com.android.contacts.CallDetailActivity,android.net.Uri)> (1)
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result getContactInfo(android.content.Context,java.lang.String)> (2)
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result loadInBackground()> (1)
<com.android.email.NotificationController: android.graphics.Bitmap getSenderPhoto(com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.email.activity.ContactStatusLoader: java.lang.Object loadInBackground()> (1)
<android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> ()
<android.provider.ContactsContract$ProfileSyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> ()
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)> (18)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)> ()
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> (2)
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> (7)
<com.android.contacts.calllog.ContactInfoHelper: com.android.contacts.calllog.ContactInfo lookupContactFromUri(android.net.Uri)> (2)
<com.android.contacts.list.ContactEntryListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (10)
<com.android.contacts.list.ContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (3)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (1)
<com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion: java.lang.String buildUri()> (2)
<com.android.contacts.list.ContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.DefaultContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (2)
<com.android.contacts.list.EmailAddressListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (2)
<com.android.contacts.list.LegacyContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.PhoneNumberListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.PostalAddressListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (1)
<com.android.contacts.list.ContactListAdapter: android.net.Uri getContactUri(int)> (5)
<com.android.contacts.list.ContactListAdapter: android.net.Uri getFirstContactUri()> (3)
<com.android.contacts.list.DefaultContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (1)
<com.android.contacts.list.DefaultContactListAdapter: android.net.Uri getContactUri(int)> (1)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int)> (2)
<com.android.contacts.list.DefaultContactListAdapter: android.net.Uri getFirstContactUri()> (1)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getFirstContactUri()> (1)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor addSearchSuggestionsBasedOnFilter(android.database.MatrixCursor,android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchShortcutRefresh(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String)> (2)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchSuggestionsQuery(android.database.sqlite.SQLiteDatabase,android.net.Uri,java.lang.String[],java.lang.String)> (2)
<com.android.contacts.util.NameConverter: java.lang.String structuredNameToDisplayName(android.content.Context,java.util.Map)> (2)
<com.android.contacts.list.AccountFilterActivity: java.util.List loadAccountFilters(android.content.Context)> (1)
<com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: com.android.contacts.list.CustomContactListFilterActivity$AccountSet loadInBackground()> (1)
<com.android.contacts.list.AccountFilterActivity: java.util.List access$100(android.content.Context)> (1)
<com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: java.lang.Object loadInBackground()> (1)
<com.android.contacts.list.AccountFilterActivity$FilterLoader: java.util.List loadInBackground()> (1)
<com.android.contacts.list.AccountFilterActivity$FilterLoader: java.lang.Object loadInBackground()> (1)
<com.android.phone.PhoneUtils: com.android.phone.PhoneUtils$CallerInfoToken startGetCallerInfo(android.content.Context,com.android.internal.telephony.Connection,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (7)
<com.android.phone.PhoneUtils: com.android.phone.PhoneUtils$CallerInfoToken startGetCallerInfo(android.content.Context,com.android.internal.telephony.Call,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (2)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$SyncWithPhoneStateStatus syncWithPhoneState()> (2)
<com.android.contacts.calllog.CallLogAdapter: java.lang.String getBetterNumberFromContacts(java.lang.String,java.lang.String)> (1)
<com.android.contacts.list.PostalAddressListAdapter: android.net.Uri getDataUri(int)> (1)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.net.Uri getPhoneUri(int)> (1)
<com.android.contacts.detail.ContactDetailDisplayUtils$StreamPhotoTag: android.net.Uri getStreamItemPhotoUri()> (1)
<android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> ()
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,java.lang.String)> (3)
<com.android.phone.PhoneUtils: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,com.android.internal.telephony.Connection)> (2)
<com.android.calendar.event.AttendeesView: android.view.View access$100(com.android.calendar.event.AttendeesView,com.android.calendar.event.EditEventHelper$AttendeeItem)> (2)
<com.android.contacts.util.NameConverter: java.lang.String structuredNameToDisplayName(android.content.Context,android.content.ContentValues)> (1)
<com.android.contacts.model.AccountTypeManagerImpl: java.util.Map access$400(com.android.contacts.model.AccountTypeManagerImpl,android.content.Context)> (1)
<com.android.mms.ui.ComposeMessageActivity: android.net.Uri getContactUriForEmail(java.lang.String)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: android.net.Uri getContactUriForEmail(java.lang.String)> (1)
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getThumbnail(android.net.Uri,com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getVideoThumbnail(android.net.Uri,com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.mms.ui.MessageListAdapter: com.android.mms.ui.MessageItem getCachedMessageItem(java.lang.String,long,android.database.Cursor)> (4)
<com.android.mms.model.ImageModel: com.android.mms.util.ItemLoadedFuture loadThumbnailBitmap(com.android.mms.util.ItemLoadedCallback)> (2)
<com.android.mms.model.VideoModel: com.android.mms.util.ItemLoadedFuture loadThumbnailBitmap(com.android.mms.util.ItemLoadedCallback)> (1)
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo doSecondaryLookupIfNecessary(android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfo)> (2)
<com.android.common.contacts.BaseEmailAddressAdapter$DirectoryPartitionFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.mms.data.Contact$ContactsCache: java.util.List getContactInfoForPhoneUris(android.os.Parcelable[])> (1)
<com.android.mms.data.Contact: java.util.List getByPhoneUris(android.os.Parcelable[])> (1)
<com.android.mms.data.ContactList: com.android.mms.data.ContactList blockingGetByUris(android.os.Parcelable[])> (1)
<com.android.contacts.list.PhoneNumberListAdapter: android.net.Uri getDataUri(int)> (2)
<android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> ()
<com.android.phone.ContactsAsyncHelper$ImageTracker: android.net.Uri getPhotoUri()> (1)
<com.android.mms.data.Contact: android.net.Uri getUri()> (6)
<com.android.mms.ui.ComposeMessageActivity: android.net.Uri getContactUriForPhoneNumber(java.lang.String)> (2)
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: android.net.Uri getContactUriForPhoneNumber(java.lang.String)> (1)
<com.android.contacts.GroupMemberLoader: com.android.contacts.GroupMemberLoader constructLoaderForGroupDetailQuery(android.content.Context,long)> (1)
<com.android.contacts.GroupMemberLoader: com.android.contacts.GroupMemberLoader constructLoaderForGroupEditorQuery(android.content.Context,long)> (1)
<com.android.vcard.VCardEntry: java.lang.String toString()> ()
<com.android.mms.transaction.SmsReceiverService: android.net.Uri storeMessage(android.content.Context,android.telephony.SmsMessage[],int)> (2)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri replaceMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.contacts.model.EntityDeltaList: java.util.ArrayList buildDiff()> (2)
<com.android.contacts.list.CustomContactListFilterActivity$GroupDelta: android.content.ContentProviderOperation buildDiff()> (1)
<com.android.contacts.list.CustomContactListFilterActivity$AccountSet: java.util.ArrayList buildDiff()> (1)
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.mms.data.WorkingMessage: java.lang.String readDraftSmsMessage(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: java.lang.String access$000(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri storeMessage(android.telephony.SmsMessage)> (2)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri replaceMessage(android.telephony.SmsMessage)> (1)
<com.android.contacts.ContactsListActivity: android.net.Uri getContactUri(int)> ()

Permission:android.permission.MANAGE_ACCOUNTS
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (10)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)> (1)

Permission:android.permission.READ_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceId()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceId()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getDeviceId()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceId()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getDeviceId()> (1)
<android.telephony.TelephonyManager: java.lang.String getDeviceId()> (3)
<com.android.emailcommon.Device: java.lang.String getConsistentDeviceId(android.content.Context)> (1)
<com.android.emailcommon.Device: java.lang.String getDeviceIdInternal(android.content.Context)> (1)
<com.android.emailcommon.Device: java.lang.String getDeviceId(android.content.Context)> (5)
<com.android.email.service.AccountService$1: java.lang.String getDeviceId()> (2)
<com.android.emailcommon.service.IAccountService$Stub$Proxy: java.lang.String getDeviceId()> ()
<com.android.emailcommon.service.IAccountService$Stub: java.lang.String getDeviceId()> (2)
<com.android.emailcommon.service.IAccountService: java.lang.String getDeviceId()> (1)
<com.android.email.Controller: com.android.emailcommon.service.IEmailService access$100(com.android.email.Controller,long)> (1)
<com.android.email.Controller: com.android.emailcommon.service.IEmailService getServiceForMessage(long)> (2)
<com.android.email.Controller: int searchMessages(long,com.android.emailcommon.service.SearchParams)> (2)
<com.android.email.mail.store.ServiceStore: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> (2)
<com.android.email.activity.MessagesAdapter$SearchCursorLoader: android.database.Cursor loadInBackground()> (3)
<com.android.email.mail.Store: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> (3)
<com.android.email.mail.store.ExchangeStore: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> (2)
<com.android.email.activity.MessagesAdapter$MessagesCursorLoader: android.database.Cursor loadInBackground()> (3)
<com.android.email.activity.MessagesAdapter$SearchCursorLoader: java.lang.Object loadInBackground()> (3)
<com.android.email.mail.store.ImapStore: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.email.mail.store.Pop3Store: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.email.activity.MessagesAdapter$MessagesCursorLoader: java.lang.Object loadInBackground()> (2)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceSvn()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceSvn()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getDeviceSvn()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceSvn()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getDeviceSvn()> (1)
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()> (1)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getSubscriberId()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberId()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getSubscriberId()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getSubscriberId()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getSubscriberId()> (1)
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()> (10)
<com.android.server.ThrottleService$DataRecorder: java.io.File getDataFile()> (2)
<com.android.settings.DataUsageSummary: java.lang.String getActiveSubscriberId(android.content.Context)> (4)
<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkQuotaInfo getNetworkQuotaInfoUnchecked(android.net.NetworkState)> (1)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIccSerialNumber()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIccSerialNumber()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getIccSerialNumber()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIccSerialNumber()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getIccSerialNumber()> (1)
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()> ()
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1Number()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1Number()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getLine1Number()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1Number()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getLine1Number()> (1)
<android.telephony.TelephonyManager: java.lang.String getLine1Number()> (4)
<com.android.mms.ui.MessageUtils: java.lang.String getLocalNumber()> (4)
<com.android.mms.transaction.Transaction: byte[] getPdu(java.lang.String)> (4)
<com.android.mms.transaction.Transaction: byte[] sendPdu(long,byte[],java.lang.String)> (7)
<com.android.mms.transaction.NotificationTransaction: byte[] getPdu(java.lang.String)> (2)
<com.android.mms.transaction.ReadRecTransaction: byte[] getPdu(java.lang.String)> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] getPdu(java.lang.String)> (2)
<com.android.mms.transaction.SendTransaction: byte[] getPdu(java.lang.String)> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.Transaction: byte[] sendPdu(byte[],java.lang.String)> (4)
<com.android.mms.transaction.Transaction: byte[] sendPdu(byte[])> (4)
<com.android.mms.transaction.Transaction: byte[] sendPdu(long,byte[])> (4)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(byte[],java.lang.String)> (2)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(byte[],java.lang.String)> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(byte[],java.lang.String)> (2)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(byte[],java.lang.String)> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(byte[])> (2)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(byte[])> (2)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(byte[])> (2)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(byte[])> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(long,byte[])> (1)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(long,byte[])> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(long,byte[])> (1)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(long,byte[])> (2)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1AlphaTag()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1AlphaTag()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getLine1AlphaTag()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1AlphaTag()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getLine1AlphaTag()> (1)
<android.telephony.TelephonyManager: java.lang.String getLine1AlphaTag()> (1)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getMsisdn()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getMsisdn()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getMsisdn()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getMsisdn()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getMsisdn()> (1)
<android.telephony.TelephonyManager: java.lang.String getMsisdn()> ()
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailNumber()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailNumber()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getVoiceMailNumber()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailNumber()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getVoiceMailNumber()> (1)
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()> (2)
<com.android.contacts.ContactsUtils: android.net.Uri getCallUri(java.lang.String)> (2)
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,java.lang.String)> (3)
<com.android.contacts.CallDetailActivity: com.android.contacts.PhoneCallDetails getPhoneCallDetailsForUri(android.net.Uri)> (1)
<com.android.contacts.calllog.PhoneNumberHelper: java.lang.CharSequence getDisplayNumber(java.lang.CharSequence,java.lang.CharSequence)> (6)
<com.android.contacts.ContactsUtils: android.content.Intent getCallIntent(java.lang.String,java.lang.String)> (4)
<com.android.phone.PhoneUtils: com.android.phone.PhoneUtils$CallerInfoToken startGetCallerInfo(android.content.Context,com.android.internal.telephony.Connection,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (7)
<com.android.internal.telephony.CallerInfo: java.lang.String getCallerId(android.content.Context,java.lang.String)> ()
<com.android.phone.PhoneUtils: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,com.android.internal.telephony.Connection)> (2)
<com.android.contacts.CallDetailActivity: com.android.contacts.PhoneCallDetails access$300(com.android.contacts.CallDetailActivity,android.net.Uri)> (1)
<com.android.contacts.calllog.CallLogListItemHelper: java.lang.CharSequence getCallActionDescription(com.android.contacts.PhoneCallDetails)> (1)
<com.android.contacts.ContactsUtils: android.content.Intent getCallIntent(java.lang.String)> (6)
<com.android.phone.PhoneUtils: com.android.phone.PhoneUtils$CallerInfoToken startGetCallerInfo(android.content.Context,com.android.internal.telephony.Call,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (2)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailAlphaTag()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailAlphaTag()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getVoiceMailAlphaTag()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailAlphaTag()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getVoiceMailAlphaTag()> (1)
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()> (1)
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo markAsVoiceMail()> (2)

Permission:com.android.voicemail.permission.ADD_VOICEMAIL
<com.android.providers.contacts.VoicemailContentProvider: java.lang.String getCallingPackage()> (3)
<com.android.providers.contacts.VoicemailContentProvider: java.lang.String getPackageRestrictionClause()> (3)
<com.android.voicedialer.VoiceContact: java.lang.String redialNumber(android.app.Activity)> (1)
<android.provider.CallLog$Calls: java.lang.String getLastOutgoingCall(android.content.Context)> (1)
<com.android.phone.BluetoothAtPhonebook: java.lang.String getLastDialledNumber()> (1)

Permission:android.permission.ACCESS_COARSE_LOCATION
<com.android.server.LocationManagerService: android.location.Location _getLastKnownLocationLocked(java.lang.String)> (1)
<com.android.server.LocationManagerService: android.os.Bundle _getProviderInfoLocked(java.lang.String)> (1)
<com.android.server.LocationManagerService: android.location.Location getLastKnownLocation(java.lang.String)> (2)
<com.android.server.LocationManagerService: android.os.Bundle getProviderInfo(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastKnownLocation(java.lang.String)> ()
<android.location.ILocationManager$Stub: android.location.Location getLastKnownLocation(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: android.os.Bundle getProviderInfo(java.lang.String)> ()
<android.location.ILocationManager$Stub: android.os.Bundle getProviderInfo(java.lang.String)> (2)
<android.location.ILocationManager: android.location.Location getLastKnownLocation(java.lang.String)> (1)
<android.location.ILocationManager: android.os.Bundle getProviderInfo(java.lang.String)> (1)
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> (4)
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)> ()
<com.android.gallery3d.util.ReverseGeocoder: java.lang.String computeAddress(com.android.gallery3d.util.ReverseGeocoder$SetLatLong)> (1)
<com.android.server.location.LocationBasedCountryDetector: android.location.Location getLastKnownLocation()> (2)
<com.android.gallery3d.data.LocationClustering: java.lang.String generateName(java.util.ArrayList,com.android.gallery3d.util.ReverseGeocoder)> (1)
<com.android.server.location.LocationBasedCountryDetector: android.location.Country detectCountry()> (1)
<com.android.server.location.CountryDetectorBase: android.location.Country detectCountry()> (1)
<com.android.gallery3d.data.ClusterAlbumSet: long reload()> (1)
<com.android.gallery3d.data.MediaSet: long reload()> (16)
<com.android.gallery3d.app.SlideshowPage$SequentialSource: long reload()> (1)
<com.android.gallery3d.app.SlideshowPage$ShuffleSource: long reload()> (1)
<com.android.gallery3d.data.ClusterAlbum: long reload()> (1)
<com.android.gallery3d.data.ComboAlbum: long reload()> (1)
<com.android.gallery3d.data.ComboAlbumSet: long reload()> (1)
<com.android.gallery3d.data.FilterDeleteSet: long reload()> (1)
<com.android.gallery3d.data.FilterTypeSet: long reload()> (1)
<com.android.gallery3d.data.LocalAlbumSet: long reload()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: long reload()> (1)
<com.android.gallery3d.data.MtpDeviceSet: long reload()> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$SlideshowSource: long reload()> (1)
<com.android.gallery3d.app.SlideshowDataAdapter: com.android.gallery3d.data.MediaItem loadItem()> (1)
<com.android.gallery3d.app.SlideshowDataAdapter: com.android.gallery3d.data.MediaItem access$500(com.android.gallery3d.app.SlideshowDataAdapter)> (1)
<com.android.gallery3d.gadget.WidgetUtils: android.graphics.Bitmap createWidgetBitmap(com.android.gallery3d.data.MediaItem)> (2)
<com.android.gallery3d.ui.AlbumSetSlidingWindow: com.android.gallery3d.ui.BitmapTexture getLoadingTexture()> ()
<com.android.gallery3d.gadget.LocalPhotoSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.gadget.MediaSetSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.app.AlbumSetDataLoader: java.lang.Object access$1900(com.android.gallery3d.app.AlbumSetDataLoader,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.PhotoDataAdapter: java.lang.Object access$2500(com.android.gallery3d.app.PhotoDataAdapter,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumDataLoader: java.lang.Object access$1700(com.android.gallery3d.app.AlbumDataLoader,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.gadget.WidgetSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.server.location.LocationBasedCountryDetector: java.util.List getEnabledProviders()> (1)
<com.android.phone.PhoneInterfaceManager: android.os.Bundle getCellLocation()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.os.Bundle getCellLocation()> ()
<com.android.internal.telephony.ITelephony$Stub: android.os.Bundle getCellLocation()> (2)
<com.android.internal.telephony.ITelephony: android.os.Bundle getCellLocation()> (1)
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()> (2)
<com.android.phone.PhoneInterfaceManager: java.util.List getNeighboringCellInfo()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getNeighboringCellInfo()> ()
<com.android.internal.telephony.ITelephony$Stub: java.util.List getNeighboringCellInfo()> (2)
<com.android.internal.telephony.ITelephony: java.util.List getNeighboringCellInfo()> (1)
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()> ()
<com.android.phone.PhoneInterfaceManager: java.util.List getAllCellInfo()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getAllCellInfo()> ()
<com.android.internal.telephony.ITelephony$Stub: java.util.List getAllCellInfo()> (2)
<com.android.internal.telephony.ITelephony: java.util.List getAllCellInfo()> (1)
<android.telephony.TelephonyManager: java.util.List getAllCellInfo()> ()

Permission:android.permission.READ_CALENDAR
<com.android.calendar.month.MonthByWeekFragment: android.net.Uri access$500(com.android.calendar.month.MonthByWeekFragment)> (1)
<android.provider.CalendarContract$CalendarAlerts: long findNextAlarmTime(android.content.ContentResolver,long)> (1)
<com.android.calendar.alerts.AlertReceiver: android.database.Cursor getEventCursor(android.content.Context,long)> (2)
<com.android.calendar.alerts.AlertReceiver: android.app.PendingIntent createBroadcastMailIntent(android.content.Context,long,java.lang.String)> (1)
<com.android.calendar.alerts.AlertReceiver: android.content.Intent createEmailIntent(android.content.Context,long,java.lang.String)> (1)
<com.android.calendar.CalendarUtils$TimeZoneUtils: java.lang.String getTimeZone(android.content.Context,java.lang.Runnable)> (3)
<com.android.calendar.CalendarUtils$TimeZoneUtils: java.lang.String formatDateRange(android.content.Context,long,long,int)> (2)
<com.android.calendar.Utils: java.lang.String getTimeZone(android.content.Context,java.lang.Runnable)> (45)
<com.android.calendar.Utils: java.lang.String formatDateRange(android.content.Context,long,long,int)> (15)
<com.android.calendar.Utils: java.lang.String getDayOfWeekString(int,int,long,android.content.Context)> (2)
<com.android.calendar.Utils: int getWeekNumberFromTime(long,android.content.Context)> (2)
<com.android.calendar.widget.CalendarAppWidgetModel: com.android.calendar.widget.CalendarAppWidgetModel$DayInfo populateDayInfo(int,android.text.format.Time)> (1)
<android.provider.CalendarContract$EventsEntity$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)> (1)
<android.content.CursorEntityIterator: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)> (1)
<android.content.CursorEntityIterator: android.content.Entity next()> (5)
<android.content.CursorEntityIterator: java.lang.Object next()> (6)
<android.provider.CalendarContract$CalendarEntity$EntityIteratorImpl: android.content.Entity next()> (1)
<android.provider.CalendarContract$EventsEntity$EntityIteratorImpl: android.content.Entity next()> (1)
<android.provider.ContactsContract$Groups$EntityIteratorImpl: android.content.Entity next()> (1)
<android.provider.ContactsContract$RawContacts$EntityIteratorImpl: android.content.Entity next()> (1)
<android.provider.CalendarContract$CalendarEntity$EntityIteratorImpl: java.lang.Object next()> (1)
<android.provider.CalendarContract$EventsEntity$EntityIteratorImpl: java.lang.Object next()> (1)
<android.provider.ContactsContract$Groups$EntityIteratorImpl: java.lang.Object next()> (1)
<android.provider.ContactsContract$RawContacts$EntityIteratorImpl: java.lang.Object next()> (1)
<com.android.providers.calendar.CalendarProvider2: long getOriginalId(java.lang.String,java.lang.String)> (1)
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEventId(android.content.Context,long,int,java.lang.String,com.android.emailcommon.provider.Account,java.lang.String)> (2)
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEventId(android.content.Context,long,int,java.lang.String,com.android.emailcommon.provider.Account)> (2)
<com.android.email.activity.MessagesAdapter$SearchCursorLoader: android.database.Cursor loadInBackground()> (3)
<com.android.email.activity.MessagesAdapter$MessagesCursorLoader: android.database.Cursor loadInBackground()> (3)
<com.android.email.activity.MessagesAdapter$SearchCursorLoader: java.lang.Object loadInBackground()> (3)
<com.android.email.activity.MessagesAdapter$MessagesCursorLoader: java.lang.Object loadInBackground()> (2)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.net.Uri access$200(com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory)> (1)
<com.android.providers.calendar.CalendarProvider2: java.lang.String getOwner(long)> (2)
<com.android.calendar.alerts.AlertReceiver: android.database.Cursor getAttendeesCursor(android.content.Context,long)> (2)
<com.android.providers.calendar.CalendarProvider2: android.accounts.Account getAccount(long)> (3)

Permission:android.permission.AUTHENTICATE_ACCOUNTS
<android.accounts.AccountManagerService: java.lang.String getPassword(android.accounts.Account)> (2)
<android.accounts.AccountManagerService: java.lang.String getUserData(android.accounts.Account,java.lang.String)> (2)
<android.accounts.AccountManagerService: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getPassword(android.accounts.Account)> ()
<android.accounts.IAccountManager$Stub: java.lang.String getPassword(android.accounts.Account)> (2)
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getUserData(android.accounts.Account,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: java.lang.String getUserData(android.accounts.Account,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> (2)
<android.accounts.IAccountManager: java.lang.String getPassword(android.accounts.Account)> (1)
<android.accounts.IAccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)> (1)
<android.accounts.IAccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> (1)
<android.accounts.AccountManager: java.lang.String getPassword(android.accounts.Account)> (1)
<android.accounts.AccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)> (1)
<android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> (1)
<android.test.IsolatedContext$MockAccountManager: java.lang.String getPassword(android.accounts.Account)> (1)
<android.test.IsolatedContext$MockAccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)> (1)
<android.test.IsolatedContext$MockAccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> (1)

Permission:android.permission.GET_ACCOUNTS
<android.accounts.AccountManagerService: android.accounts.Account[] getAccounts(int)> (2)
<android.accounts.AccountManagerService: android.accounts.Account[] getAccounts(java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccounts(java.lang.String)> ()
<android.accounts.IAccountManager$Stub: android.accounts.Account[] getAccounts(java.lang.String)> (2)
<android.accounts.IAccountManager: android.accounts.Account[] getAccounts(java.lang.String)> (2)
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)> (17)
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()> (20)
<android.test.IsolatedContext$MockAccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)> (1)
<com.android.browser.GoogleAccountLogin: android.accounts.Account[] getAccounts(android.content.Context)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: android.accounts.Account findIntendedAccount(java.lang.String)> (1)
<com.android.providers.contacts.ContactsProvider2: android.accounts.Account getDefaultAccount()> (1)
<com.android.contacts.ContactLoader$Result: long getFirstWritableRawContactId(android.content.Context)> (1)
<com.android.contacts.detail.PhotoSelectionHandler: com.android.contacts.model.EntityDeltaList getDeltaForAttachingPhotoToContact()> (2)
<com.android.contacts.list.AccountFilterActivity: java.util.List loadAccountFilters(android.content.Context)> (1)
<com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: com.android.contacts.list.CustomContactListFilterActivity$AccountSet loadInBackground()> (1)
<com.android.contacts.model.EntityDelta: com.android.contacts.model.AccountType getRawContactAccountType(android.content.Context)> (3)
<com.android.contacts.util.AccountSelectionUtil: android.app.Dialog getSelectAccountDialog(android.content.Context,int,android.content.DialogInterface$OnClickListener,android.content.DialogInterface$OnCancelListener)> (4)
<com.android.contacts.ContactLoader: com.android.contacts.ContactLoader$Result loadInBackground()> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: com.android.contacts.model.EntityDeltaList getDeltaForAttachingPhotoToContact()> (2)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: com.android.contacts.model.EntityDeltaList getDeltaForAttachingPhotoToContact()> (1)
<com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: java.lang.Object loadInBackground()> (1)
<com.android.contacts.util.AccountSelectionUtil: android.app.Dialog getSelectAccountDialog(android.content.Context,int,android.content.DialogInterface$OnClickListener)> ()
<com.android.contacts.util.AccountSelectionUtil: android.app.Dialog getSelectAccountDialog(android.content.Context,int)> ()
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.contacts.ContactLoader: java.lang.Object loadInBackground()> (1)
<com.android.contacts.list.AccountFilterActivity$FilterLoader: java.util.List loadInBackground()> (1)
<com.android.contacts.model.EntityDeltaList: com.android.contacts.model.EntityDelta getFirstWritableRawContact(android.content.Context)> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.contacts.list.AccountFilterActivity$FilterLoader: java.lang.Object loadInBackground()> (1)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (10)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.browser.Preloader: com.android.browser.Preloader$PreloaderSession getSession(java.lang.String)> (2)
<com.android.browser.Controller: com.android.browser.Tab showPreloadedTab(com.android.browser.IntentHandler$UrlData)> (1)
<com.android.browser.Controller: com.android.browser.Tab openTab(com.android.browser.IntentHandler$UrlData)> (2)
<com.android.browser.Controller: com.android.browser.Tab openIncognitoTab()> (3)
<com.android.browser.Controller: com.android.browser.Tab openTabToHomePage()> (4)
<com.android.browser.UiController: com.android.browser.Tab openIncognitoTab()> (1)
<com.android.browser.UiController: com.android.browser.Tab openTabToHomePage()> (2)
<com.android.browser.BookmarkUtils: android.net.Uri getBookmarksUri(android.content.Context)> (5)
<com.android.browser.AddBookmarkPage: long addFolderToCurrent(java.lang.String)> (1)

Permission:android.permission.READ_CALL_LOG
<com.android.voicedialer.VoiceContact: java.lang.String redialNumber(android.app.Activity)> (1)
<android.provider.CallLog$Calls: java.lang.String getLastOutgoingCall(android.content.Context)> (1)
<com.android.phone.BluetoothAtPhonebook: java.lang.String getLastDialledNumber()> (1)
